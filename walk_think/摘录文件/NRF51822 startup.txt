摘自：https://zhuanlan.zhihu.com/p/22048373

IF :DEF: __STACK_SIZE                   ;预编译指令 #ifdef _STACK_SIZE
Stack_Size      EQU     __STACK_SIZE    ;#define Stack_Size __STACK_SIZE
                      ELSE                    ;#else
Stack_Size      EQU     2048            ;#define Stack_Size 2048
                      ENDIF                   ;#endif

;AREA 命令指示汇编器汇编一个新的代码段或数据段。  
;段是独立的、指定的、不可见的代码或数据块，它们由链接器处理.  
;段是独立的、命名的、不可分割的代码或数据序列。一个代码段是生成一个应用程序的最低要求  
  
;默认情况下，ELF 段在四字节边界上对齐。expression 可以拥有 0 到 31 的任何整数。  
;段在 2expression 字节边界上对齐

AREA    STACK, NOINIT, READWRITE, ALIGN=3   ;代码段名称为STACK，未初始化，允许读写，8字节对齐
Stack_Mem       SPACE      Stack_Size                          ;分配Stack_Size的栈空间，首地址赋给Stack_Mem
__initial_sp                                                ; 栈顶指针，全局变量

;基本同栈，初始化分配堆
                       IF :DEF: __HEAP_SIZE
Heap_Size       EQU     __HEAP_SIZE
                       ELSE
Heap_Size       EQU     2048
                       ENDIF

 AREA    HEAP, NOINIT, READWRITE, ALIGN=3
__heap_base
Heap_Mem        SPACE   Heap_Size
__heap_limit

                PRESERVE8                                   ;8字节对齐
                THUMB                                       ;THUMB命令模式

; Vector Table Mapped to Address 0 at Reset，重启时程序从这里运行

                AREA    RESET, DATA, READONLY               ;代码段名称为RESET，DATA类型，只读
                EXPORT  __Vectors                           ;中断向量表
                EXPORT  __Vectors_End                       ;中断向量表结束指针
                EXPORT  __Vectors_Size                      ;中断向量表大小

__Vectors       DCD     __initial_sp                        ; Top of Stack 中断向量表首位为栈指针
                DCD     Reset_Handler                       ;重启中断
                DCD     NMI_Handler                         ;不可屏蔽中断
                DCD     HardFault_Handler                   ;硬件错误中断
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     SVC_Handler                         ;监控调用模式中断
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     PendSV_Handler
                DCD     SysTick_Handler

                ; External Interrupts
                DCD     POWER_CLOCK_IRQHandler
                DCD     RADIO_IRQHandler
                DCD     UART0_IRQHandler
                DCD     SPI0_TWI0_IRQHandler
                DCD     SPI1_TWI1_IRQHandler
                DCD     0                         ; Reserved
                DCD     GPIOTE_IRQHandler
                DCD     ADC_IRQHandler
                DCD     TIMER0_IRQHandler
                DCD     TIMER1_IRQHandler
                DCD     TIMER2_IRQHandler
                DCD     RTC0_IRQHandler
                DCD     TEMP_IRQHandler
                DCD     RNG_IRQHandler
                DCD     ECB_IRQHandler
                DCD     CCM_AAR_IRQHandler
                DCD     WDT_IRQHandler
                DCD     RTC1_IRQHandler
                DCD     QDEC_IRQHandler
                DCD     LPCOMP_IRQHandler
                DCD     SWI0_IRQHandler
                DCD     SWI1_IRQHandler
                DCD     SWI2_IRQHandler
                DCD     SWI3_IRQHandler
                DCD     SWI4_IRQHandler
                DCD     SWI5_IRQHandler
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved
                DCD     0                         ; Reserved

__Vectors_End

__Vectors_Size  EQU     __Vectors_End - __Vectors   ;计算中断向量表的大小

                AREA    |.text|, CODE, READONLY     ;代码段，|.text|表示由C语言产生的代码段，CODE类型，只读

; Reset Handler     

NRF_POWER_RAMON_ADDRESS              EQU   0x40000524  ; NRF_POWER->RAMON address
NRF_POWER_RAMONB_ADDRESS             EQU   0x40000554  ; NRF_POWER->RAMONB address
NRF_POWER_RAMONx_RAMxON_ONMODE_Msk   EQU   0x3         ; All RAM blocks on in onmode bit mask

Reset_Handler   PROC
                EXPORT  Reset_Handler             [WEAK]      ;[WEAK]修饰代表其他文件有函数定义优先调用
                IMPORT  SystemInit  ;从外部调用SystemInit
                IMPORT  __main      ;从外部调用__main

;以下代码不同芯片不一样，这个是设定RAM块开启关闭的配置，这里配置为全部开启                
                MOVS    R1, #NRF_POWER_RAMONx_RAMxON_ONMODE_Msk
                
                LDR     R0, =NRF_POWER_RAMON_ADDRESS
                LDR     R2, [R0]
                ORRS    R2, R2, R1
                STR     R2, [R0]
                
                LDR     R0, =NRF_POWER_RAMONB_ADDRESS
                LDR     R2, [R0]
                ORRS    R2, R2, R1
                STR     R2, [R0]
                
                LDR     R0, =SystemInit
                BLX     R0                                  ;无返回调用SystemInit
                LDR     R0, =__main
                BX      R0                                  ;有返回调用__main
                ENDP

; Dummy Exception Handlers (infinite loops which can be modified)

NMI_Handler     PROC
                EXPORT  NMI_Handler               [WEAK]
                B       .
                ENDP
HardFault_Handler\
                PROC
                EXPORT  HardFault_Handler         [WEAK]
                B       .
                ENDP
SVC_Handler     PROC
                EXPORT  SVC_Handler               [WEAK]
                B       .
                ENDP
PendSV_Handler  PROC
                EXPORT  PendSV_Handler            [WEAK]
                B       .
                ENDP
SysTick_Handler PROC
                EXPORT  SysTick_Handler           [WEAK]
                B       .
                ENDP

Default_Handler PROC

                EXPORT   POWER_CLOCK_IRQHandler [WEAK]
                EXPORT   RADIO_IRQHandler [WEAK]
                EXPORT   UART0_IRQHandler [WEAK]
                EXPORT   SPI0_TWI0_IRQHandler [WEAK]
                EXPORT   SPI1_TWI1_IRQHandler [WEAK]
                EXPORT   GPIOTE_IRQHandler [WEAK]
                EXPORT   ADC_IRQHandler [WEAK]
                EXPORT   TIMER0_IRQHandler [WEAK]
                EXPORT   TIMER1_IRQHandler [WEAK]
                EXPORT   TIMER2_IRQHandler [WEAK]
                EXPORT   RTC0_IRQHandler [WEAK]
                EXPORT   TEMP_IRQHandler [WEAK]
                EXPORT   RNG_IRQHandler [WEAK]
                EXPORT   ECB_IRQHandler [WEAK]
                EXPORT   CCM_AAR_IRQHandler [WEAK]
                EXPORT   WDT_IRQHandler [WEAK]
                EXPORT   RTC1_IRQHandler [WEAK]
                EXPORT   QDEC_IRQHandler [WEAK]
                EXPORT   LPCOMP_IRQHandler [WEAK]
                EXPORT   SWI0_IRQHandler [WEAK]
                EXPORT   SWI1_IRQHandler [WEAK]
                EXPORT   SWI2_IRQHandler [WEAK]
                EXPORT   SWI3_IRQHandler [WEAK]
                EXPORT   SWI4_IRQHandler [WEAK]
                EXPORT   SWI5_IRQHandler [WEAK]
POWER_CLOCK_IRQHandler
RADIO_IRQHandler
UART0_IRQHandler
SPI0_TWI0_IRQHandler
SPI1_TWI1_IRQHandler
GPIOTE_IRQHandler
ADC_IRQHandler
TIMER0_IRQHandler
TIMER1_IRQHandler
TIMER2_IRQHandler
RTC0_IRQHandler
TEMP_IRQHandler
RNG_IRQHandler
ECB_IRQHandler
CCM_AAR_IRQHandler
WDT_IRQHandler
RTC1_IRQHandler
QDEC_IRQHandler
LPCOMP_IRQHandler
SWI0_IRQHandler
SWI1_IRQHandler
SWI2_IRQHandler
SWI3_IRQHandler
SWI4_IRQHandler
SWI5_IRQHandler
                B .
                ENDP
                ALIGN

; User Initial Stack & Heap,编译器预处理命令

                IF      :DEF:__MICROLIB                         ;#ifdef __MICROLIB
                
                EXPORT  __initial_sp                            ;堆栈的设置采用__MICROLIB库中的策略
                EXPORT  __heap_base
                EXPORT  __heap_limit

                ELSE                        ;#else

                IMPORT  __use_two_region_memory                 ;外部定义的两段存储模式函数
                EXPORT  __user_initial_stackheap                ;用户分配堆栈的地址

;寄存器R0，R2存储管理heap
;寄存器R1，R3管理statck

__user_initial_stackheap PROC

                LDR     R0, = Heap_Mem
                LDR     R1, = (Stack_Mem + Stack_Size)
                LDR     R2, = (Heap_Mem + Heap_Size)
                LDR     R3, = Stack_Mem
                BX      LR
                ENDP

                ALIGN

                ENDIF

                END